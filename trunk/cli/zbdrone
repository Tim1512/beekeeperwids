#!/usr/bin/python


import os
import sys
import time
import argparse
sys.path.append("../") # temporary hack during development
from drone import DroneClient, DroneTask

class CLI:

	def __init__(self):
		parser = argparse.ArgumentParser()
		parser.add_argument('-f', '--find-local', action='store_true')
		parser.add_argument('-m', '--monitor', action='store_true')
		parser.add_argument('-d', '--debug', action='store_true')
		parser.add_argument('-q', '--id', action='store')
		parser.add_argument('-l', '--list-drones', '--list', action='store_true')
		parser.add_argument('-r', '--start-drone', '--start', action='store_true')
		parser.add_argument('-c', '--stop-drone', '--stop',  action='store_true')
		parser.add_argument('-k', '--kill-drone', '--kill', action='store_true')
		parser.add_argument('-e', '--enumerate', action='store_true')	
		parser.add_argument('-s', '--status', action='store_true', dest='status')
		parser.add_argument('-i', '--interface', action='store')
		parser.add_argument('-a', '--address', action='store', default='127.0.0.1')
		parser.add_argument('-p', '--port', action='store', default=9999)
		parser.add_argument('-j', '--join', action='store_true')
		#parser.add_argument('-P', '--plugins', actions='store_true')
		#parser.add_argument('--show', action='store')
		args = parser.parse_args()

		if args.id == None:
			if 'droneid' in os.environ.keys():
				args.id = os.environ['droneid']
			else:
				args.id = 0

		if args.monitor:
			self.monitor(args)
		if args.list_drones:
			self.listDaemons(args)
		if args.start_drone:
			self.startDaemon(args)
		if args.stop_drone:
			self.stopDaemon(args)
		if args.kill_drone:
			self.killDaemon(args)
		if args.enumerate:
			self.enumerateInterfaces(args)
		if args.status:
			self.showStatus(args)
		else:
			self.printUsage()

	def printUsage(self):
		print("you are using it wrong...")


	def displayStatus(self, json_status):

		print(json_status)
		status = json.loads(json_status)


		config = status.get('config')
		pid = config.get('pid')
		port = config.get('port')
		tasks_running = status.get('tasks_running')
		tasks_completed = status.get('tasks_completed')
		event_logs = status.get('event_logs')

		#os.system('clear')
		print("="*40)
		print("Killerbee Drone Status")
		print("="*40)

		print("\n\nDRONE CONFIG:")
		print("="*20)
		print(str('\tPID').ljust(8) + ': ' + str(pid))
		print(str('\tPORT').ljust(8) + ': ' + str(port))

		print("\n\nINTERFACES:")
		print("="*20)

		'''
		print("\n\nSCHEDULED TASKS:")
		print("="*20)
		for task in tasks_scheduled.values():
			print("\t{0} - {1}, {2}".format(task.id, task.runtime, task.method, task.callback))
		'''

		print("\n\nRUNNING TASKS:")
		print("="*20)
		for task in tasks_running.values():
			task_id = task.get('id')
			task_name = task.get('name')
			task_callback = task.get('callback')
			print("\t{0} - {1}, {2}".format(task_id, task_name, task_callback))

		print("\n\nCOMPLETED TASKS:")
		print("="*20)
		for task in tasks_completed.values():
			task_id = task.get('id')
			task_name = task.get('name')
			task_callback = task.get('callback')
			print("\t{0} - {1}, {2}".format(task_id, task_name, task_callback))

		print("\n\nEVENT LOGS:")
		print("="*20)
		print('\t' + '\n\t'.join(event_logs.split('\n')))


	def getStatus(self, args):
		client = DroneClient(args.address, args.port)
		status = client.getStatus()
		return status


	def showStatus(self, args):
		self.displayStatus(self.getStatus(args))

	def monitor(self, args):
		refresh = 3
		while True:
			os.system('clear')
			self.showStatus(args)
			time.sleep(refresh)
	


	def findlocal(self, args):
		while True:
			
			# run file
			runfile = open('/var/run/drone.{0}'.format(args.id), 'r').read()	
			pid = runfile.split()[0].split('=')[1]
			port = runfile.split()[1].split('=')[1]
		
			# processes
			cmd = ['ps', '-F', '--pid', pid]
			p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
			out, err = p.communicate()
			process = out.split('\n')[1]
			
			# socket
			cmd = ['netstat', '-n', '-t', '-p', '-l']
			p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
			out, err = p.communicate()
			netstat = [line for line in out.split('\n') if '127.0.0.1:{0}'.format(port) in line][0]

			# logfile
			logs = open('/var/log/drone.{0}.log'.format(args.id), 'r').read().split('\n')


			# output to terminal
			os.system('clear')
			self.ui_header('DRONE MONITOR')
			print('')
			self.ui_header('DAEMON')
			print(str('PID').ljust(8) + ': ' + str(pid))
			print(str('PORT').ljust(8) + ': ' + str(port))
			print(str('PROCESS').ljust(8) + ': ' + str(process))
			print(str('SOCKET').ljust(8) + ': ' + str(netstat))
			print('')
			self.ui_header('LOGS')
			print('\n'.join(logs))
			print('')
			self.ui_header('TASKS - QUEU')
			print('')	
			self.ui_header('TASKS - ACTIVE')
			print('')
			self.ui_header('TASKS - HISTORY')
			print('')

			return

	def ui_header(self, msg):
		l = 15
		print("="*l)
		print(msg)
		print("="*l)


		
	def listDaemons(self, args):
		daemons = []
		# iterate through all run files
		for f in os.listdir('/var/run'):
			if 'drone' in f:
				runfile = '/var/run/{0}'.format(f)
				pid = open(runfile).read().split()[0].split('=')[1]
				port = open(runfile).read().split()[1].split('=')[1]
				droneid = f.split('.')[1]
				c = DroneClient('127.0.0.1', port)
				status = c.getStatus()
				daemons.append({'droneid':droneid, 'port':port, 'pid':pid})

		if len(daemons) == 0:
			print("\nNo Running Daemons\n")
		else:
			print("\nRunning Drone Daemons:\n")	
			print(str("DroneID").ljust(10) + str("PID").ljust(10) + str("PORT").ljust(10) + str("UP").ljust(10))
			print(str("=======").ljust(10) + str("===").ljust(10) + str("====").ljust(10) + str("==").ljust(10))
			for d in daemons:
				droneid = d.get('droneid')
				port = d.get('port')
				pid = d.get('pid')
				print(str(droneid).ljust(10) + str(pid).ljust(10) + str(port).ljust(10) + str('YES').ljust(10))
			print("")
	


	def startDaemon(self, args):
		if args.id == None:
			print("\n[!] Please specify the daemon to start")
			print("\n\tExample: zbdrone --start-daemon --id 'drone0'\n")
		else:
			drone_id = args.id
			print("\n[+] Starting new drone daemon: {0}".format(drone_id))
			cmd = './droned --droneid {0}'.format(drone_id)
			DEVNULL = open(os.devnull, 'wb')
			subprocess.Popen(cmd.split(), stdout=DEVNULL, stderr=DEVNULL)

	def stopDaemon(self, args):
		if args.id == None:
			print("\n[!] Please specify the drone daemon to stop")
			print("\n\tExample: zbdrone --stop-daemon --id 'drone0'\n")
		else:
			drone_id = args.id
			client = DroneClient(args.address, args.port)
			client.stopDaemon()

	def killDaemon(self, args):
		if args.id == None:
			print("\n[!] Please specify the daemon to kill")
			print("\n\tExample: zbdrone --kill-daemon --id 'drone0'\n")
		else:
			drone_id = args.id
			print("\n[+] Killing drone daemon: {0}".format(drone_id))
			runfile = '/var/run/drone.{0}'.format(drone_id)
			pid = open(runfile).read().split()[0].split('=')[1]
			os.remove(runfile)
			os.system('kill {0}'.format(pid))

	
	def showInterface(self, index):
		if not index in [range(10), '*', 'all']:
			print("please specify an appropiate interface index")
			return
		interfaces = self.client.getInterfaces()
		print(interfaces)
			
	def enumerateInterfaces(selfi, args):
		client = DroneClient(args.address, args.port)
		interfaces = client.enumerateInterfaces()
		print(interfaces)
	


class DroneMonitor:

	def __init__(self):
		self.spacing = 3	
		self.refresh_rate = 1
		self.scheduled_tasks = 5
		self.running_tasks = 5
		self.completed_tasks = 5
		self.logs = 5
		self.run = True

	def printConfig(self, key, value):
		print(str(" "*self.spacing) + str(key).ljust(8) + str(value))

	def printTask(self, task):
		return

	def printLog(self, log):
		return

	def printInterface(self, interface):
		return

	def printHeader(self, header):
		return

	def printSection(self, section):
		return


	def stop(self):
		self.run = False

	def displayStatus(self, status):

		os.system('clear')
		print("="*40)
		print("Killerbee Drone Status")
		print("="*40)

		print("\n\nDRONE CONFIG:")
		print("="*20)
		self.printConfig("PID", os.getpid())
		print(str('\tPID').ljust(8) + ': ' + str(os.getpid()))
		print(str('\tPORT').ljust(8) + ': ' + str(self.port))

		print("\n\nINTERFACES:")
		print("="*20)

		print("\n\nSCHEDULED TASKS:")
		print("="*20)
		for task in self.tasks_scheduled:
			print("\t{0} - {1}, {2}".format(task.id, task.runtime, task.method, task.callback))

		print("\n\nRUNNING TASKS:")
		print("="*20)
		for task in self.tasks_running.values():
			print("\t{0} - {1}, {2}, {3}".format(task.id, task.runtime, task.method, task.callback))


		print("\n\nCOMPLETED TASKS:")
		print("="*20)
		for task in self.tasks_completed.values():
			print("\t{0} - {1}, {2}, {3}".format(task.id, task.runtime, task.method, task.callback))

		print("\n\nEVENT LOGS:")
		print("="*20)
		for event in self.logger.events[-5:]:
			print(event)


CLI()
