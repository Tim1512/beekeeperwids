#!/usr/bin/python


import os
import sys
import time
import argparse
import subprocess
import json

from killerbeewids.drone import DroneClient, DroneDaemon
from killerbeewids.utils import KBLogUtil

class CLI:

	def __init__(self):
		parser = argparse.ArgumentParser()
		parser.add_argument('-I', '--drone-id', '--id', action='store', dest='drone_id', default='0')
		parser.add_argument('-S', '--start-drone', '--start', action='store_true', dest="start")
		parser.add_argument('-K', '--kill-drone', '--kill', action='store_true', dest="kill")
		parser.add_argument('-R', '--restart-drone', '--restart', action='store_true', dest='restart')
		parser.add_argument('-a', '--address', action='store', default='127.0.0.1')
		parser.add_argument('-p', '--port', action='store', default=9999)
		parser.add_argument('-m', '--monitor', action='store_true')
		parser.add_argument('-s', '--status', action='store_true', dest='status')
		parser.add_argument('-i', '--interface', action='store')
		parser.add_argument('-P', '--plugins', action='store_true')


		parser.add_argument('-t', '--task', action='store_true')
		parser.add_argument('-d', '--detask', action='store_true')

		args = parser.parse_args()

		if args.task:
			self.testTask()
		if args.detask:
			self.testDetask()
		if args.start:
			self.startDrone(args)
		if args.status:
			self.status()
		if args.monitor:
			self.monitor()
		if args.kill:
			self.shutdownDrone(args)

	def testTask(self):
		c = DroneClient('127.0.0.1', 9999)
		print(c.testTask())

	def testDetask(self):
		c = DroneClient('127.0.0.1', 9999)
		print(c.testDetask())


	def startDrone(self, args):
		d = DroneDaemon(args.drone_id, args.port)
		d.startDaemon()

	def shutdownDrone(self, args):
		client = DroneClient(args.address, args.port)
		client.shutdownDrone()

	def forceStopDaemon(self, args):
		runfile = KBRLogUtil("kbdrone.{0}".format(args.drone_id))
		runfile.unset()

	def killDaemon(self, args):
		runfile = KBLogUtil("kbdrone.{0}".format(args.drone_id))
		os.system("kill {0}".format(runfile.getPID()))

	def monitor(self):
		refresh = 3
		while True:
			self.status()
			time.sleep(refresh)

	def status(self):
		c = DroneClient('127.0.0.1', 9999)
		try:
			json_data = c.getStatus()
			self.displayStatus(json_data)
		except(IOError):
			print("Unable to establish connection with drone")

	def displayStatus(self, json_data):
		os.system('clear')
		data = json.loads(json_data)
		pid = data.get('config').get('pid')
		name = data.get('config').get('name')
		print("="*40)
		print("Killerbee Drone Status")
		print("="*40)
		print("[+] DRONE CONFIG:")
		print(str('\tNAME').ljust(8) + ': ' + str(name))
		print(str('\tPID').ljust(8) + ': ' + str(pid))
		print("\n[+] INTERFACES:")
		for interface in data.get('interfaces'):
			device = interface.get('device')
			active = interface.get('active')
			plugin = interface.get('plugin')
			print("\n\t[+] Interface: {0} (Active={1}, Plugin={2})".format(device, active, plugin))
		print("\n[+] PLUGINS:")
		for plugin in data.get('plugins'):
			desc = plugin.get('desc')
			pid = plugin.get('pid')
			active = plugin.get('active')
			print("\n\t[+] Plugin: {0} (PID={1}, Active={2})".format(desc, pid, active))
			for process in plugin.get('processes'):
				pdesc = process.get('desc')
				ppid = process.get('pid')
				print("\n\t\t[+] Process: {0} (PID={1})".format(pdesc, ppid))	
			for task in plugin.get('tasks'):
				uuid = task.get('uuid')
				parameters = task.get('parameters')
				callback = task.get('parameters').get('callback')
				del(parameters['callback'])
				print("\n\t\t[+] Task: {0} (Callback: {1})".format(uuid, callback))
				print("\t\t\t{0}".format(parameters))

	


if __name__ == '__main__':
	CLI()

