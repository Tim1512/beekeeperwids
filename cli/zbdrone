#!/usr/bin/python

import os
import sys
import subprocess
import argparse
import json
import flask
import traceback
from time import sleep
from beekeeperwids.drone.client import DroneClient
from beekeeperwids.drone.daemon import DroneDaemon
from beekeeperwids.utils import KBLogUtil, terminal_ui
from beekeeperwids.utils.errors import ErrorCodes as ec


        

def start(args):
    '''
    starts a drone instance in the background
    '''
    cmd = 'zbdrone -run -name {0} -port {1}'.format(args.name, args.port).split(' ')
    DEVNULL = open(os.devnull, 'w')
    subprocess.Popen(cmd, stdout=DEVNULL, stderr=DEVNULL)

def run(args):
    '''
    runs a drone instance in the terminal
    '''
    try:
        DroneDaemon(args.name, args.port).startDaemon()
    except Exception:
        traceback.print_exc()

def stop(args):
    '''
    sends an interrupt signal (SIGINT) to the drone process
    '''
    pid = KBLogUtil(args.name, None).getPID()
    os.system('kill -s 2 {0}'.format(pid))

def listener(args):
    '''
    deploys simple server to test drone data callbacks
    '''

    def recvTestData():
        '''
        test function that receives data from the test listener
        '''
        print("============ RECV DATA ==============")
        data = json.loads(flask.request.data)
        print('UUID : {0}'.format(data.get('uuid')))
        print('PKT  : {0}'.format(data.get('pkt')))
        return "thank you come again"

    app = flask.Flask(__name__)
    app.add_url_rule('/testdata', None, recvTestData, methods=['POST'])
    app.run(debug=False, port=9992)


def logs(args):
    '''
    tails the logfile for the daemon
    '''
    os.system('clear')
    logfile = KBLogUtil(args.name).logfilename
    os.system('tail -F {0}'.format(logfile))


def watch(args):
    '''
    runs the find command every <refresh> seconds
    '''
    while True:
        os.system('clear')
        find(args)
        sleep(args.refresh)

def find(args):
    '''
    searches the process list for running drone processes
    '''
    cmd = ['ps', '-f', '-C', 'zbdrone']
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    o,e = p.communicate()
    print(o)

def monitor(args):
    '''
    runs the status command every <refresh> seconds
    '''
    while True:
        os.system('clear')
        status(args)
        sleep(args.refresh)

def task(args):
    '''
    send a task request to the drone
    '''
    if args.uuid == None or args.channel == None or args.plugin == None or args.callback == None or args.filter == None:
        usage = '\nUSAGE: \n\nzbdrone --task --uuid "0123456" --channel "11" --plugin "CapturePlugin" --callback "http://url" -filter "{0}"\n'
        print(usage)
        sys.exit()

    parameters = {}
    parameters['callback'] = args.callback
    parameters['filter'] = args.filter
    (error,data) = DroneClient(args.address, args.port).task(args.plugin, args.channel, args.uuid, parameters)
    processResults(error,data)

def detask(args):
    '''
    sends a detask request to the drone
    '''
    c = DroneClient(args.address, args.port)
    (error,data) = c.detask(args.uuid)
    processResults(error,data)


def status(args):
    '''
    queries the drone daemon for status information
    '''
    c = DroneClient(args.address, args.port)
    (error,data) = c.status()
    if not error == None:
        processResults(error,data)
    else:
        displayStatus(data)

def displayStatus(data):
    '''
    displays the status of a drone to the terminal
    '''
    print('\n[+] Drone Status:\n')
    print(data)
    print('')

def processResults(error, data):
    if error == None:
            print('\n[+] Success\n')
            if not data == None:
                print('{0}\n'.format(data))
    else:
            print('\n[!] Error: {0}\n'.format(ec.getError(error)))
            if not data == None:
                print("{0}".format(data))

def paste(args):
    print('\n\nzbdrone -task -uuid "0123456" -channel "11" -plugin "CapturePlugin" -callback "http://127.0.0.1:9992/testdata" -filter "{}"\n')



if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-start', action='store_true')
    parser.add_argument('-run', action='store_true')
    parser.add_argument('-stop', action='store_true')
    parser.add_argument('-kill', action='store_true')
    parser.add_argument('-droneid', action='store', default='0')
    parser.add_argument('-name', action='store', default='drone0')
    parser.add_argument('-address', action='store', default='127.0.0.1')
    parser.add_argument('-port', action='store', type=int, default=9999)
    parser.add_argument('-task', action='store_true')
    parser.add_argument('-detask', action='store_true')
    parser.add_argument('-uuid', action='store')
    parser.add_argument('-channel', action='store', type=int)
    parser.add_argument('-plugin', action='store')
    parser.add_argument('-filter', action='store')
    parser.add_argument('-callback', action='store')
    parser.add_argument('-find', action='store_true')
    parser.add_argument('-watch', action='store_true')
    parser.add_argument('-status', action='store_true')
    parser.add_argument('-monitor', action='store_true')
    parser.add_argument('-refresh', action='store', type=int, default=3)
    parser.add_argument('-logs', action='store_true')
    parser.add_argument('-debug', action='store_true')
    parser.add_argument('-listener', action='store_true')
    parser.add_argument('-test', action='store_true')
    parser.add_argument('-paste', action='store_true')
    parser.add_argument('-v', action='store_true')
    parser.add_argument('-vv', action='store_true')
    

    args = parser.parse_args()

    if args.debug:
        debug(args)
    if args.paste:
        paste(args)
    elif args.test:
        test(args)
    elif args.listener:
        listener(args)
    elif args.run:
        run(args)
    elif args.start:
        start(args)
    elif args.stop:
        stop(args)
    elif args.kill:
        kill(args)
    elif args.task:
        task(args)
    elif args.detask:
        detask(args)
    elif args.find:
        find(args)
    elif args.watch:
        watch(args)
    elif args.status:
        status(args)
    elif args.monitor:
        monitor(args)
    elif args.logs:
        logs(args)
    elif args.task:
        task(args)
    elif args.detask:
        detask(args)
